package top.builbu.website.websocket.controller;


import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.http.server.ServletServerHttpRequest;
import org.springframework.web.socket.WebSocketHandler;
import top.builbu.business.user.entity.SessionUser;
import top.builbu.core.entity.Code;
import java.util.Map;
import java.util.PriorityQueue;
import javax.servlet.http.HttpSession;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class HandshakeInterceptor implements org.springframework.web.socket.server.HandshakeInterceptor {
    
	 static PriorityQueue<SessionUser> queue =null;   
	    
    //初次握手访问前
    @Override
    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map<String, Object> map) throws Exception {

    	if (request instanceof ServletServerHttpRequest) {
            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;
            
            HttpSession session = servletRequest.getServletRequest().getSession(true);
           
            if (session != null) {
                //使用userName区分WebSocketHandler，以便定向发送消息
                Object temp = session.getAttribute(Code.USER_SESSION);
                if(temp!= null){
                    if(temp instanceof SessionUser){
                    	SessionUser user = (SessionUser)temp;
                    queue = new PriorityQueue<SessionUser>();
                    queue.add(user);
                   	 while(queue.size()>0){  
                         synchronized (queue) {  //首先锁定对象  
                       //      如果队列为空，那么消费者无法消费，必须等待生产者产生商品，所以需要释放对象锁，并让自己进入等待状态  
                           //  System.out.println("当前队列中剩余数据个数："+queue.size());                          	
                             while(queue.size()==0) {                              	
                              try {
             					queue.wait();
             				} catch (InterruptedException e) {
             					// TODO Auto-generated catch block
             					e.printStackTrace();
             				}  //使用wait()这个方法的时候，对象必须是获取锁的状态，调用了这个方法后，线程会释放该对象锁  
                             }  
                          //   如果不为空,取出第一个对象 
                            
                             SessionUser use= queue.poll();
                             log.debug("链接用户ID"+use.getUserId());
                             map.put(SessionManager.USER_SESSION,use);  //存入数据，方便在hander中获取
                             map.put(Code.USER_ID, use.getUserId());
                             session.removeAttribute(Code.USER_SESSION);
                            
                             
                                                
                          //   注意notify()方法就是释放这个对象的锁，从而其他需要这个对象的线程中就会有一个能够获得锁，但是不能指定具体的线程  
                             queue.notify();  
                             try {  
                                 Thread.sleep(100);  
                             } catch (InterruptedException e) {  
                                 e.printStackTrace();  
                             }  
                             System.out.println("消费一个数据后，队列中剩余数据个数："+queue.size()+"线程");                            
                         }  
                    	
                    	
                    }
                }
            }
        }
    	}
        return true;
    }

    //初次握手访问后
    @Override
    public void afterHandshake(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e) {
        log.debug("访问：" + serverHttpRequest.getRemoteAddress());	
    }
}