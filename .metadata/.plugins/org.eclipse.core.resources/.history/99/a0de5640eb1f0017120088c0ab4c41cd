package top.builbu.website.websocketcontroller;

import com.alibaba.fastjson.JSONObject;
import crm.config.Code;
import crm.config.MsgDeliverServiceRoom;
import crm.webSocket.entity.SessionUser;
import org.apache.log4j.Logger;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.*;
import java.io.IOException;
import java.util.HashMap;


/**
 * 
 */
@Configuration
public class WebSocketHander implements WebSocketHandler {
    private static final Logger logger = Logger.getLogger(WebSocketHander.class);
    private SessionManager sessionManager = SessionManager.instance();
    private static final HashMap<Long, WebSocketSession> userMap;

    static {
        userMap = new HashMap<Long, WebSocketSession>();      
    }
    //初次链接成功执行
    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        logger.debug("链接成功......");
        Object temp = session.getAttributes().get(SessionManager.USER_SESSION);
        if(temp!= null){
            SessionUser user = (SessionUser)temp; //用户信息
           
                    userMap.put(user.getUserId(), session);
                    System.out.print("链接完成===========================================================用户Id"+user.getUserId());
                   

        }
    }

    //接受消息处理消息
    @Override
    public void handleMessage(WebSocketSession webSocketSession, WebSocketMessage<?> webSocketMessage) throws Exception {
    	
    	 SessionUser user =(SessionUser) webSocketSession.getAttributes().get(SessionManager.USER_SESSION);
    	 MsgDeliverServiceRoom mdsr = new MsgDeliverServiceRoom();
    	 mdsr.setTargetId(0l);
    	 mdsr.setMsgBody(webSocketMessage.getPayload()+ "");
    	 mdsr.setMsgType(Code.MSG_TYPE_2);
    	// System.out.print("接受请求了"+webSocketMessage.getPayload()+ "");
        sessionManager.sendMessage(user, JSONObject.toJSONString(mdsr),Code.MSG_ORIGIN_CLIENT);
    }

    @Override
    public void handleTransportError(WebSocketSession webSocketSession, Throwable throwable) throws Exception {
        if(webSocketSession.isOpen()){
            webSocketSession.close();
        }
//        Object temp = webSocketSession.getAttributes().get(SessionManager.USER_SESSION);
//        SessionUser user = (SessionUser)temp; //用户信息
//        userMap.remove(user.getUserId());
        System.out.print("链接出错，关闭链接......");
        logger.debug("链接出错，关闭链接......");
        
       
    }

    @Override
    public void afterConnectionClosed(WebSocketSession webSocketSession, CloseStatus closeStatus) throws Exception {
        logger.debug("链接关闭......" + closeStatus.toString());
        System.out.print("关闭链接......"+closeStatus.toString());
      
    }

    @Override
    public boolean supportsPartialMessages() {
        return false;
    }
    
    /**
     * 给某个用户发送消息
     *
     * @param userName
     * @param message
     */
    public void sendMessageToUser(Long userId, TextMessage message) {

    	System.out.print("===================用户存在用户ID"+userId);
         WebSocketSession user=userMap.get(userId);
         	
            if (null!=user) {
            	System.out.print("===================用户已存在用户");
                try {
                    if (user.isOpen()) {
                        user.sendMessage(message);
                        userMap.remove(userId);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
                
            }
        
    }
}
